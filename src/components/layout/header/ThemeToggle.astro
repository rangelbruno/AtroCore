---
interface Props {
  defaultTheme?: "light" | "dark";
  toggleColors?: {
    light: string;
    dark: string;
  };
}

const {
  defaultTheme = "light",
  toggleColors = {
    light: "#c8ccd4",
    dark: "#111827",
  },
} = Astro.props;
---

<div class="checkbox-wrapper-51 mr-5">
  <input
    id="theme-toggle"
    type="checkbox"
    aria-label="Toggle dark mode"
    data-default-theme={defaultTheme}
  />
  <label
    class="toggle"
    for="theme-toggle"
    style={`--toggle-light: ${toggleColors.light}; --toggle-dark: ${toggleColors.dark}`}
  >
    <span>
      <svg viewBox="0 0 10 10" height="10px" width="10px">
        <path
          d="M5,1 L5,1 C2.790861,1 1,2.790861 1,5 L1,5 C1,7.209139 2.790861,9 5,9 L5,9 C7.209139,9 9,7.209139 9,5 L9,5 C9,2.790861 7.209139,1 5,1 L5,9 L5,1 Z"
        ></path>
      </svg>
    </span>
  </label>
</div>

<style>
  .checkbox-wrapper-51 {
    --toggle-width: 42px;
    --toggle-height: 24px;
    --toggle-padding: 1px;
    --toggle-animation-duration: 0.2s;
    --toggle-shadow-color: 154, 153, 153;
    --toggle-line-width: 2px;
    --toggle-icon-size: 10px;
    --toggle-icon-margin: 7px;
  }

  .checkbox-wrapper-51 input[type="checkbox"] {
    visibility: hidden;
    display: none;
  }

  .checkbox-wrapper-51 .toggle {
    position: relative;
    display: block;
    width: var(--toggle-width);
    height: var(--toggle-height);
    cursor: pointer;
    -webkit-tap-highlight-color: transparent;
    transform: translate3d(0, 0, 0);
  }

  .checkbox-wrapper-51 .toggle:before {
    content: "";
    position: relative;
    top: var(--toggle-padding);
    left: var(--toggle-padding);
    width: calc(var(--toggle-width) - 2px);
    height: calc(var(--toggle-height) - 2px);
    display: block;
    background: var(--toggle-light);
    border-radius: calc(var(--toggle-height) / 2);
    transition: background var(--toggle-animation-duration) ease;
  }

  .checkbox-wrapper-51 .toggle span {
    position: absolute;
    top: 0;
    left: 0;
    width: var(--toggle-height);
    height: var(--toggle-height);
    display: block;
    background: #fff;
    border-radius: 50%;
    box-shadow: 0 2px 6px rgba(var(--toggle-shadow-color), 0.75);
    transition: all var(--toggle-animation-duration) ease;
  }

  .checkbox-wrapper-51 .toggle span svg {
    margin: var(--toggle-icon-margin);
    fill: none;
  }

  .checkbox-wrapper-51 .toggle span svg path {
    stroke: var(--toggle-light);
    stroke-width: var(--toggle-line-width);
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-dasharray: 24;
    stroke-dashoffset: 0;
    transition: all 0.5s linear;
  }

  .checkbox-wrapper-51 input[type="checkbox"]:checked + .toggle:before {
    background: var(--toggle-dark);
  }

  .checkbox-wrapper-51 input[type="checkbox"]:checked + .toggle span {
    transform: translateX(18px);
  }

  .checkbox-wrapper-51 input[type="checkbox"]:checked + .toggle span path {
    stroke: #000000;
    stroke-dasharray: 25;
    stroke-dashoffset: 25;
  }
</style>

<script>
  interface ThemeEventDetail {
    theme: "light" | "dark";
  }

  interface ThemeChangeEvent extends CustomEvent<ThemeEventDetail> {
    type: "header:themeChange";
  }

  declare global {
    interface WindowEventMap {
      "header:themeChange": ThemeChangeEvent;
    }
  }

  class ThemeManager {
    private toggle: HTMLInputElement;
    private mediaQuery: MediaQueryList;

    constructor() {
      this.toggle = document.getElementById("theme-toggle") as HTMLInputElement;
      this.mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");

      this.initialize();
      this.setupEventListeners();
    }

    private initialize() {
      const savedTheme = localStorage.getItem("theme") as "light" | "dark";
      const defaultTheme = this.toggle.dataset.defaultTheme as "light" | "dark";
      const systemTheme = this.mediaQuery.matches ? "dark" : "light";

      const theme = savedTheme || defaultTheme || systemTheme;

      this.setTheme(theme);
    }

    private setupEventListeners() {
      this.toggle.addEventListener("change", () => this.handleToggle());
      this.mediaQuery.addEventListener("change", (e) =>
        this.handleSystemThemeChange(e)
      );
    }

    private handleToggle() {
      const newTheme = this.toggle.checked ? "dark" : "light";
      this.setTheme(newTheme);
      this.dispatchThemeEvent(newTheme);
    }

    private handleSystemThemeChange(e: MediaQueryListEvent) {
      if (!localStorage.getItem("theme")) {
        const newTheme = e.matches ? "dark" : "light";
        this.setTheme(newTheme);
      }
    }

    private setTheme(theme: "light" | "dark") {
      document.documentElement.classList.toggle("dark", theme === "dark");
      this.toggle.checked = theme === "dark";
      localStorage.setItem("theme", theme);
    }

    private dispatchThemeEvent(theme: "light" | "dark") {
      const themeEvent = new CustomEvent("header:themeChange", {
        detail: { theme },
      });
      window.dispatchEvent(themeEvent);
    }
  }

  // Initialize theme manager when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new ThemeManager();
  });
</script>
