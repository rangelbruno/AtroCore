---
interface Props {
  searchPlaceholder?: string;
  class?: string;
}

const { searchPlaceholder = "Search...", class: className = "" } = Astro.props;

const actionButtonClass = `
  p-2 rounded-full
  text-gray-500 dark:text-gray-400
  hover:bg-gray-100 dark:hover:bg-gray-700
  hover:text-gray-700 dark:hover:text-gray-300
  focus:outline-none focus:ring-2
  focus:ring-blue-500 focus:ring-offset-2
  transition-colors duration-200
`;
---

<header
  class:list={[
    "bg-white dark:bg-gray-800",
    "shadow-sm dark:shadow-gray-900",
    "border-b border-gray-200 dark:border-gray-700",
    className,
  ]}
>
  <div class="flex items-center justify-between px-4 py-3">
    <div class="w-[280px]">
      <form class="relative" role="search" id="search-form">
        <input
          type="search"
          name="search"
          placeholder={searchPlaceholder}
          class="w-full pl-10 pr-4 py-2
                 rounded-lg
                 border border-gray-300 dark:border-gray-600
                 bg-gray-50 dark:bg-gray-700
                 text-gray-900 dark:text-gray-100
                 placeholder:text-gray-500 dark:placeholder:text-gray-400
                 focus:outline-none focus:ring-2
                 focus:ring-blue-500 dark:focus:ring-blue-400
                 focus:border-transparent
                 transition-colors duration-200"
          aria-label="Search"
        />
        <svg
          class="absolute left-3 top-2.5 h-5 w-5
                 text-gray-400 dark:text-gray-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </form>
    </div>

    <div class="flex items-center">
      <button
        type="button"
        id="theme-toggle"
        class={actionButtonClass}
        aria-label="Toggle dark mode"
        title="Toggle dark mode"
      >
        {/* Sun icon (shown in dark mode) */}
        <svg
          class="h-5 w-5 hidden dark:block"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
          ></path>
        </svg>
        {/* Moon icon (shown in light mode) */}
        <svg
          class="h-5 w-5 dark:hidden"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
          ></path>
        </svg>
      </button>
      <button
        type="button"
        class={actionButtonClass + " ml-2"}
        aria-label="Open settings"
        title="Settings"
      >
        <svg
          class="h-5 w-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
          ></path>
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
      </button>
    </div>
  </div>
</header>

<script>
  // Search functionality
  const searchForm = document.getElementById("search-form");
  const searchInput = searchForm?.querySelector(
    'input[type="search"]'
  ) as HTMLInputElement;

  let searchTimeout: number;

  if (searchForm && searchInput) {
    searchForm.addEventListener("submit", (e) => {
      e.preventDefault();
      handleSearch(searchInput.value);
    });

    searchInput.addEventListener("input", (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        handleSearch(searchInput.value);
      }, 300) as unknown as number;
    });
  }

  function handleSearch(query: string) {
    const searchEvent = new CustomEvent("header:search", {
      detail: { query },
    });
    window.dispatchEvent(searchEvent);
  }

  // Theme toggle functionality
  const themeToggle = document.getElementById("theme-toggle");

  // Check for saved theme preference, otherwise use system preference
  const theme = (() => {
    const savedTheme = localStorage.getItem("theme");
    if (typeof localStorage !== "undefined" && savedTheme) {
      return savedTheme;
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  // Apply theme on page load
  if (theme === "light") {
    document.documentElement.classList.remove("dark");
  } else {
    document.documentElement.classList.add("dark");
  }

  // Save the theme preference
  localStorage.setItem("theme", theme as string);

  // Handle theme toggle click
  themeToggle?.addEventListener("click", () => {
    const isDark = document.documentElement.classList.toggle("dark");
    const newTheme = isDark ? "dark" : "light";
    localStorage.setItem("theme", newTheme);

    // Dispatch event for theme change
    const themeEvent = new CustomEvent("header:themeChange", {
      detail: { theme: newTheme },
    });
    window.dispatchEvent(themeEvent);
  });
</script>
